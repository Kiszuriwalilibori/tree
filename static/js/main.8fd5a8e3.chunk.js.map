{"version":3,"sources":["redux/items.ts","redux/input.ts","components/EmptyLoader.tsx","js/serviceWorker.js","index.tsx","js/functions.ts"],"names":["removeItem","createAction","append","itemsReducer","createReducer","items","builder","addCase","state","action","removeNode","payload","store","item","tablesFit","addItemToStore","find","element","createCompletedStore","addDefaultCase","deleteItem","array","splice","indexOf","ary1","ary2","push","ary","arg","removable","includes","forEach","Array","isArray","index","initAppend","closeInput","initialState","activeScope","isInputActive","inputsReducer","EmptyLoader","Boolean","window","location","hostname","match","App","lazy","configureStore","reducer","input","ReactDOM","render","fallback","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","containsAlphanumericKey","str","test","validateAgainstDuplicate","getFlattenArray","arr","flat","reduce","acc","val","concat"],"mappings":"2LAGaA,EAAaC,YAAuB,2BACpCC,EAASD,YAAwB,sBAMxCE,EAAeC,YAJW,CAC9BC,MAAO,CAAC,SAAU,UAAW,CAAC,YAAa,QAAS,YAAa,2BAGlB,SAAAC,GAC/CA,EACGC,QAAQP,GAAW,SAACQ,EAAMC,GAAkCD,EAAMH,MAAQK,EAAW,YAAIF,EAAMH,OAAQI,EAAOE,YAC9GJ,QAAQL,GAAO,SAACM,EAAOC,GAAmCD,EAAMH,MAuC9D,SAA8BO,EAAOC,GAEtCC,YAAUF,EAAOC,GACnBE,EAAeH,EAAOC,GAEtBE,EACEH,EAAMI,MAAK,SAACC,GAAD,OAAuBH,YAAUG,EAASJ,MAAOA,GAGhE,OAAOD,EAhDoEM,CAAqB,YAAIV,EAAMH,OAAQI,EAAOE,YACtHQ,gBAAe,kBAGLhB,MAIf,IAIMiB,EAAa,SAACC,EAAkBR,GACpCQ,EAAMC,OAAOD,EAAME,QAAQV,GAAO,IAG9BE,EAAiB,SAACS,EAAgBC,GAAjB,OAAmCD,EAAKE,KAAKD,EAAK,KAI5Df,EAAa,SAACE,EAAOS,GAEhC,IAdkBM,EAAeC,EAc3BC,EAAYR,EAAM,GAcxB,OAbIA,EAAM,IAfQM,EAgBAf,EAhBegB,EAgBRP,EAflBP,YAAUa,EAAKC,IAAQD,EAAIG,SAASF,EAAI,IAgB3CR,EAAWR,EAAOiB,GAElBjB,EAAMmB,SAAQ,SAACd,GACbe,MAAMC,QAAQhB,IAAYH,YAAUG,EAASI,IAAUD,EAAWH,EAASY,OAI/EjB,EAAMmB,SAAQ,SAACd,EAAmBiB,GAChCF,MAAMC,QAAQhB,IAAYA,EAAQ,KAAOY,GAAajB,EAAMU,OAAOY,EAAO,MAGvEtB,I,gCChDT,+EACauB,EAAalC,YAAuB,2BACpCmC,EAAanC,YAAa,2BAEjCoC,EAA0B,CAC9BC,YAAa,GACbC,eAAe,GAGXC,EAAgBpC,YAAciC,GAAc,SAAA/B,GAChDA,EACGC,QAAQ4B,GAAY,SAAC3B,EAAOC,GAC3BD,EAAM8B,YAAc7B,EAAOE,QAC3BH,EAAM+B,eAAgB,KAEvBhC,QAAQ6B,GAAY,kBAAMC,KAC1BlB,gBAAe,kBAGLqB,O,gCCjBAC,IADK,kBAAW,O,kJCUXC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,mCCRAC,EAAMC,gBAAK,kBAAM,uDAEjBpC,EAAQqC,YAAe,CAACC,QAAS,CAAC7C,MAAOF,IAAcgD,MAAOX,OACpEY,IAASC,OACP,kBAAC,IAAD,CAAUzC,MAAOA,GACf,kBAAC,WAAD,CAAU0C,SAAUb,eAClB,kBAAC,EAAD,QAGJc,SAASC,eAAe,SDgHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,+BEvIrB,SAASpD,EAAUU,EAAgBC,GAExC,OAAOD,EAAK,KAAOC,EAAK,GAF1B,sGAiBO,IAAM0C,EAA0B,SAACC,GACtC,MAAO,WAAWC,KAAKD,IAElB,SAASE,EAAyBjD,EAAiBR,GAIxD,OAdF,SAAS0D,EAAgBC,GAEtB,OAAQA,EAAIC,KAAOD,EAAIC,OAAQD,EAAIE,QAAO,SAACC,EAAeC,GAAhB,OAAyC5C,MAAMC,QAAQ2C,GAAOD,EAAIE,OAAON,EAAgBK,IAAQD,EAAIE,OAAOD,KAAO,IAU9IL,CAAgBlD,GAEhBS,SAASjB,EAAK,O","file":"static/js/main.8fd5a8e3.chunk.js","sourcesContent":["import { createAction, createReducer, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { tablesFit } from \"../js/functions\";\r\nimport { ItemsStore,itemsType } from './types';\r\nexport const removeItem = createAction<string[]>(\"redux/items/REMOVE_ITEM\");\r\nexport const append = createAction<itemsType>(\"redux/items/APPEND\");\r\n\r\nconst initialState:ItemsStore = {\r\n  items: [\"People\", \"Age 40+\", [\"Ethnicity\", \"Black\", \"Hispanic\"], \"Income yearly 45kUSD+\"],\r\n};\r\n\r\nconst itemsReducer = createReducer(initialState, builder => {\r\n  builder\r\n    .addCase(removeItem,(state,action:PayloadAction<string[]>)=>{state.items = removeNode([...state.items], action.payload)})\r\n    .addCase(append,(state, action:PayloadAction<itemsType>)=>{state.items = createCompletedStore([...state.items], action.payload)})\r\n    .addDefaultCase(() => {})\r\n});\r\n\r\nexport default itemsReducer;\r\n\r\n// FUNCTIONS //////////////////////////////////////////////////////////////\r\n// SUPPORTING FUNCTIONS ///////////////////////////////////////////////////\r\nconst checkArray = (ary:itemsType, arg:itemsType):boolean => {\r\n  return tablesFit(ary, arg) && ary.includes(arg[1]) ? false : true; //false if element is contained true when element IS NOT contained\r\n};\r\n\r\nconst deleteItem = (array: itemsType, item:string) => {\r\n  array.splice(array.indexOf(item), 1);\r\n};\r\n\r\nconst addItemToStore = (ary1:itemsType, ary2:itemsType) =>ary1.push(ary2[1]);\r\n\r\n// MAIN FUNCTIONS ////////////////////////////////////////////////////////\r\n\r\nexport const removeNode = (store, array:string[]) => {\r\n\r\n  const removable = array[1];\r\n  if (array[0]) {\r\n    if (!checkArray(store, array)) {\r\n      deleteItem(store, removable);\r\n    } else {\r\n      store.forEach((element: itemsType):void => {\r\n        Array.isArray(element) && tablesFit(element, array) && deleteItem(element, removable);\r\n      });\r\n    }\r\n  } else {\r\n    store.forEach((element:itemsType, index:number):void => {\r\n      Array.isArray(element) && element[0] === removable && store.splice(index, 1);\r\n    });\r\n  }\r\n  return store;\r\n};\r\n\r\nexport function createCompletedStore(store, item:itemsType) {\r\n   \r\n  if (tablesFit(store, item)) {\r\n    addItemToStore(store, item);\r\n  } else {\r\n    addItemToStore(\r\n      store.find((element:itemsType) => tablesFit(element, item)),item);\r\n  }\r\n  \r\n  return store;\r\n}\r\n\r\n","import {InputStore} from './types';\r\nimport { createAction, createReducer, PayloadAction } from \"@reduxjs/toolkit\";\r\nexport const initAppend = createAction<string[]>(\"redux/input/INIT_APPEND\");\r\nexport const closeInput = createAction(\"redux/input/CLOSE_INPUT\");\r\n\r\nconst initialState:InputStore = {\r\n  activeScope: [],\r\n  isInputActive: false,\r\n};\r\n\r\nconst inputsReducer = createReducer(initialState, builder => {\r\n  builder\r\n    .addCase(initAppend, (state, action:PayloadAction<string[]>) => {\r\n      state.activeScope = action.payload;\r\n      state.isInputActive = true;\r\n    })\r\n    .addCase(closeInput, () => initialState)\r\n    .addDefaultCase(() => {});\r\n});\r\n\r\nexport default inputsReducer;\r\n","import { NullLiteral } from \"typescript\";\r\n\r\nconst EmptyLoader = ():null => null;\r\nexport default EmptyLoader;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { lazy, Suspense } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport \"./styles/App.css\";\nimport * as serviceWorker from \"./js/serviceWorker\";\nimport EmptyLoader from \"./components/EmptyLoader\";\nimport itemsReducer from './redux/items';\nimport inputsReducer  from './redux/input';\nimport { configureStore } from '@reduxjs/toolkit'\n\nconst App = lazy(() => import(\"./components/App\"));\n\nconst store = configureStore({reducer: {items: itemsReducer, input: inputsReducer}});\nReactDOM.render(\n  <Provider store={store}>\n    <Suspense fallback={EmptyLoader()}>\n      <App />\n    </Suspense>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n","import {itemsType } from '../redux/types';\r\n\r\nexport function tablesFit(ary1:itemsType, ary2:itemsType):boolean {\r\n  \r\n  return ary1[0] === ary2[0];\r\n}\r\n\r\n// function getFlattenArray(arr:itemsType):string[] {\r\n\r\n//   return arr.reduce((acc: string[], val:string[]|string) => (Array.isArray(val) ? acc.concat(getFlattenArray(val)) : acc.concat(val)), []);\r\n// }\r\n\r\nfunction getFlattenArray(arr:itemsType):string[] {\r\n  \r\n   return (arr.flat)? arr.flat(): arr.reduce((acc: string[], val:string[]|string) => (Array.isArray(val) ? acc.concat(getFlattenArray(val)) : acc.concat(val)), []);\r\n}\r\n\r\n\r\n\r\nexport const containsAlphanumericKey = (str:string):boolean => {\r\n  return /\\d|[A-z]/.test(str);\r\n};\r\nexport function validateAgainstDuplicate(array:itemsType, item:string[]):boolean { \r\n  \r\n  const flatten = getFlattenArray(array);\r\n  \r\n  return !flatten.includes(item[1]);\r\n}\r\n"],"sourceRoot":""}