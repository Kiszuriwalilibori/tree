{"version":3,"sources":["components/AttemptToOverwriteExistingKeyWarning.tsx","components/NoAlphaNumericKeyWarning.tsx","components/AppendItemModal.tsx","components/DeleteItemButton.tsx","components/Tree.tsx","components/App.tsx"],"names":["AttemptToOverwriteExistingKeyWarning","React","props","isNotValidated","Alert","severity","AlertTitle","NoAlphaNumericKeyWarning","noAlpha","button","width","margin","AppendItemModal","connect","state","items","activeScope","input","dispatch","onSubmit","data","append","closeInput","onClose","primary","useFormik","initialValues","inputValue","shouldInitializeCategory","validationSchema","Yup","shape","matches","required","values","actions","result","validateAgainstDuplicate","setSubmitting","setFieldValue","handleSubmit","getFieldProps","submitCount","errors","className","Boolean","Object","keys","length","TextField","size","label","variant","color","type","style","onClick","e","preventDefault","id","htmlFor","MyIconButton","withStyles","root","transition","backgroundColor","IconButton","DeleteItemButton","removeItem","memo","string","header","click","useCallback","debounce","AppendItemButton","lazy","enhanced","Component","classInner","classOuter","distancer","TextItem","Element","ary","head","enhancedElement","Map","set","SecondaryHeaderText","Header","undefined","Tree","shift","HeadingElement","get","WrapperStyle","EnhancedElement","Fragment","map","item","key","fallback","EmptyLoader","App","isInputActive","criterias","_","cloneDeep"],"mappings":"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","file":"static/js/4.0200d9cd.chunk.js","sourcesContent":["import * as React from \"react\";\r\nimport { Alert, AlertTitle } from \"@material-ui/lab\";\r\nimport PropTypes from 'prop-types';\r\n\r\ninterface propsType{\r\n  isNotValidated:boolean\r\n}\r\nconst Warning = (props: propsType) => {\r\n  const {isNotValidated} = props;\r\n\r\n  return isNotValidated ? (\r\n    <Alert severity=\"error\">\r\n      <AlertTitle>Uwaga!!!</AlertTitle>\r\n      Takie kryterium już jest. Nie można dodać go po raz drugi.\r\n    </Alert>\r\n  ) : null;\r\n}\r\n\r\nexport const  AttemptToOverwriteExistingKeyWarning = React.memo(Warning);\r\n\r\nWarning.propTypes ={\r\n  isNotValidated: PropTypes.bool\r\n}","import * as React from \"react\";\r\nimport { Alert, AlertTitle } from \"@material-ui/lab\";\r\nimport PropTypes from 'prop-types';\r\n\r\ninterface WarningProps {\r\n  noAlpha: boolean;\r\n}\r\n\r\nconst Warning = (props:WarningProps) => {\r\n  const {noAlpha} =props;\r\n  return noAlpha ? (\r\n    <Alert severity=\"error\">\r\n      <AlertTitle>Uwaga!!!</AlertTitle>\r\n      Nazwa kryterium musi zawierać choć jeden znak alfanumeryczny.\r\n    </Alert>\r\n  ) : null;\r\n};\r\n\r\nexport const NoAlphaNumericKeyWarning =React.memo(Warning);\r\n\r\nWarning.propTypes ={\r\n  noAlpha: PropTypes.bool\r\n}\r\n\r\n","import * as React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { TextField, Button } from \"@material-ui/core\";\r\nimport { closeInput } from \"../redux/input\";\r\nimport { append } from \"../redux/items\";\r\nimport { validateAgainstDuplicate } from \"../js/functions\";\r\nimport { AttemptToOverwriteExistingKeyWarning } from \"./AttemptToOverwriteExistingKeyWarning\";\r\nimport { NoAlphaNumericKeyWarning } from \"./NoAlphaNumericKeyWarning\";\r\nimport PropTypes from \"prop-types\";\r\nimport { itemsType } from \"../redux/types\";\r\nimport { useFormik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\n\r\ninterface appendProps {\r\n  onSubmit: Function;\r\n  onClose: Function;\r\n  items: (string | string[])[];\r\n  activeScope: string;\r\n}\r\n\r\ninterface input {\r\n  current: null | any;\r\n}\r\n\r\nconst button = { width: \"150px\", margin: \"0 auto\" };\r\n\r\nconst Modal = (props: appendProps) => {\r\n  const { onSubmit, onClose, items, activeScope } = props;\r\n  const primary = items[0] === activeScope;\r\n\r\n  const close = (e: { preventDefault: () => void }) => {\r\n    e.preventDefault();\r\n    onClose();\r\n  };\r\n\r\n  const {\r\n    values: { inputValue, isNotValidated, shouldInitializeCategory },\r\n    handleSubmit,\r\n    getFieldProps,\r\n    submitCount,\r\n    errors,\r\n  } = useFormik({\r\n    initialValues: {\r\n      inputValue: \"\",\r\n      isNotValidated: false,\r\n      shouldInitializeCategory: false,\r\n    },\r\n    validationSchema: Yup.object().shape({\r\n      inputValue: Yup.string()\r\n        .matches(/\\d|[A-z]/, \"Kryterium musi zawierać choć jeden znak alfanumeryczny\")\r\n        .required(\"Required\"),\r\n    }),\r\n    onSubmit(values, actions) {\r\n      if (validateAgainstDuplicate(items, [activeScope, inputValue])) {\r\n        let result: string | string[] | input;\r\n        if (primary) {\r\n          result = shouldInitializeCategory ? [inputValue] : inputValue;\r\n        } else {\r\n          result = values.inputValue;\r\n        }\r\n        onSubmit([activeScope, result]);\r\n        actions.setSubmitting(false);\r\n      } else {\r\n        actions.setFieldValue(\"isNotValidated\", true);\r\n        actions.setSubmitting(false);\r\n      }\r\n    },\r\n  });\r\n\r\n  return (\r\n    <div className=\"modal\">\r\n      <form className=\"modal-content\" onSubmit={handleSubmit}>\r\n        <AttemptToOverwriteExistingKeyWarning isNotValidated={isNotValidated} />\r\n        <NoAlphaNumericKeyWarning noAlpha={Boolean(Object.keys(errors).length && submitCount)} />\r\n        <span>Wpisz nowe kryterium</span>\r\n        <TextField required size=\"small\" label=\"Kryterium\" variant=\"outlined\" {...getFieldProps(\"inputValue\")} />\r\n        <Button variant=\"contained\" size=\"large\" color=\"primary\" type=\"submit\" style={button}>\r\n          Dodaj\r\n        </Button>\r\n        <Button variant=\"contained\" size=\"large\" style={button} color=\"secondary\" onClick={close}>\r\n          Zamknij\r\n        </Button>\r\n        {primary ? (\r\n          <div>\r\n            <input className=\"styled-checkbox\" id=\"checkbox\" type=\"checkbox\" {...getFieldProps(\"shouldInitializeCategory\")}></input>\r\n            <label htmlFor=\"checkbox\">Inicjować katalog?</label>\r\n          </div>\r\n        ) : null}\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: { items: { items: itemsType }; input: { activeScope: string } }) => ({\r\n  items: state.items.items,\r\n  activeScope: state.input.activeScope,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: (arg0: { payload: itemsType; type: string }) => void) => ({\r\n  onSubmit: (data: itemsType): void => {\r\n    dispatch(append(data));\r\n    dispatch(closeInput());\r\n  },\r\n  onClose: () => dispatch(closeInput()),\r\n});\r\n\r\nexport const AppendItemModal = connect(mapStateToProps, mapDispatchToProps)(Modal);\r\n\r\nModal.propTypes = {\r\n  onSubmit: PropTypes.func,\r\n  onClose: PropTypes.func,\r\n  items: PropTypes.array,\r\n  activeScope: PropTypes.string,\r\n};\r\n","// sends to store array with header of scope and string identifying item within scope\r\nimport React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport {debounce } from \"lodash\";\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { removeItem } from \"../redux/items\";\r\nimport { useCallback } from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\nconst iconColor ='#F15C6A';\r\nconst iconHoverColor ='rgba(241, 92, 106, 0.34)';\r\n\r\nconst MyIconButton = withStyles({\r\n  root: {\r\n    color: iconColor,\r\n    transition: \"background-color 0.5s ease-in-out\",\r\n    \"&:hover\":{backgroundColor: iconHoverColor,}\r\n  },\r\n  \r\n})(IconButton);\r\n\r\n\r\ninterface ButtonProps {\r\n  onClick: Function;\r\n  string: string;\r\n  header: string|undefined;\r\n}\r\n\r\nconst Button = (props:ButtonProps) => {\r\n  const { onClick, string, header } = props;\r\n\r\n  // const click = useCallback(\r\n  //   (e: React.MouseEvent<HTMLButtonElement>): void=> {\r\n  //     onClick([header, string]);\r\n  //   },\r\n  //   [header, string, onClick]\r\n  // );\r\n  \r\n  const click = useCallback(debounce(\r\n    (e: React.MouseEvent<HTMLButtonElement>): void=> {\r\n      onClick([header, string]);\r\n    },200),\r\n    [header, string, onClick]\r\n  );\r\n\r\n\r\n\r\n\r\n\r\n  return <MyIconButton onClick={click}>\r\n            <i className=\"fas fa-minus-circle delete\" >\r\n            </i>\r\n          </MyIconButton>;\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: (arg0: { payload: string[]; type: string; }) => void) => ({\r\n  onClick: (data:string[]):void => dispatch(removeItem(data)),\r\n});\r\n\r\nexport const DeleteItemButton = connect(null, mapDispatchToProps)(React.memo(Button));\r\n\r\nButton.propTypes ={\r\n  onClick: PropTypes.func,\r\n  string: PropTypes.string,\r\n  header:PropTypes.string\r\n}","//Header mógłby być funkcją przyjmującą dwa propsy i zawracającą komponent a nie obiekt\r\n\r\nimport React, { lazy, Suspense } from \"react\";\r\nimport { DeleteItemButton } from \"./DeleteItemButton\";\r\nimport EmptyLoader from \"./EmptyLoader\";\r\nimport PropTypes from 'prop-types';\r\n\r\ninterface headerPropsType{string:string}\r\ninterface textElementPropsType{string:string}\r\ninterface elementPropsType{string:string, header: string|undefined}\r\ninterface treePropsType{ary:string[], primary:boolean, head:string }\r\n\r\nconst AppendItemButton = lazy(() => import(\"./AppendItemButton\"));\r\n\r\n//HOC creating function\r\n//distancer is entity that renders horizontal line to the left of elements. class_outer and _inner wrap component accordingly\r\nconst enhanced = (Component, classInner ='', classOuter ='', distancer ='' ) => {\r\n  return (props) => (\r\n    <div className={classOuter}>\r\n      <div className={distancer}></div>\r\n      <div className={classInner}>\r\n        <Component {...props} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n//basic element -string within <span>\r\nconst TextItem = (props:textElementPropsType) => {\r\n  const { string } = props;\r\n  return <span className=\"TextItem\">{string}</span>;\r\n};\r\n\r\n//Element renders node of scheme which could be single criterium field or subtree of fields, depending of props.\r\n//If prop 'string' is string it renders single field, if not it renders subtree\r\n//header prop is not read here but passed to Delete component which removes field\r\n\r\nconst Element = (props:elementPropsType) => {\r\n  const { string, header } = props;\r\n  if (typeof string === \"string\") {\r\n    return (\r\n      <div className=\"element\">\r\n        <TextItem string={string} />\r\n        <DeleteItemButton string={string} header={header} />\r\n      </div>\r\n    );\r\n  } else {\r\n    return <Tree ary={string} primary={false} head={''} />;\r\n  }\r\n};\r\n\r\n//object that returns calls to enhancer together with two sets of parameters\r\n//In this project case tree cand be only main or subtree and boolean fits well, in more complex case the prop shpuld be more flexible.\r\nlet enhancedElement =new Map();\r\nenhancedElement.set(true,enhanced(Element, \"wrapper-primary\", \"wrapper-primary-outer\", \"distancer\"));\r\nenhancedElement.set(false,enhanced(Element, \"wrapper-secondary\", \"wrapper-secondary-outer\", \"distancer\"));\r\n\r\n//enhancer wrapps Text Item with class suitable for subtree header\r\nconst SecondaryHeaderText = enhanced(TextItem, \"wrapper-secondary\");\r\n\r\nlet Header = new Map();\r\nHeader.set(true, enhanced(TextItem, \"top-header\"));\r\nHeader.set(false, function (props:headerPropsType) {\r\n      const { string } = props;\r\n      return (\r\n        <div className=\"element\">\r\n          <SecondaryHeaderText string={string} />\r\n          <DeleteItemButton string={string} header ={undefined}/>\r\n        </div>\r\n      );\r\n    }\r\n)\r\n\r\n//Tree is quite versatile component that renders both main scheme and subtree\r\n// Prop 'primary' keeps information (as boolean) whether its main scheme or its subtree and rules its behavior and view.\r\n\r\nexport const Tree = (props:treePropsType) => {\r\n  const { ary, primary, head } = props;\r\n  const header = primary ? head : ary.shift();\r\n  const HeadingElement = Header.get(primary);\r\n  const WrapperStyle = primary ? \"contentWrapperPrimary\" : \"contentWrapperSecondary\";\r\n  const EnhancedElement = enhancedElement.get(primary);\r\n\r\n  return ary ? (\r\n    <React.Fragment>\r\n      <HeadingElement string={header} />\r\n      <div className={WrapperStyle}>\r\n        {ary.map((item) => (\r\n          <EnhancedElement key={item} string={item} header={header} />\r\n        ))}\r\n        <Suspense fallback={EmptyLoader()}>\r\n          <AppendItemButton string={header} primary={primary} />\r\n        </Suspense>\r\n      </div>\r\n    </React.Fragment>\r\n  ) : null;\r\n};\r\n\r\n\r\nTree.propTypes ={\r\n  ary: PropTypes.array,\r\n  primary: PropTypes.bool,\r\n  head:PropTypes.string,\r\n}\r\n","import React from \"react\";\nimport _ from \"lodash\";\nimport { connect } from \"react-redux\";\nimport { AppendItemModal } from \"./AppendItemModal\";\nimport { Tree } from \"./Tree\";\nimport {StoreType} from \"../redux/types\";\nimport PropTypes from 'prop-types';\n\nfunction localApp(props: { items; isInputActive: boolean; }) {\n\n  const { items, isInputActive } = props;\n  const criterias = _.cloneDeep(items);\n  const header = criterias.shift();\n\n  return items ? (\n    <React.Fragment>\n      {isInputActive ? <AppendItemModal /> : null}\n      <Tree ary={criterias} primary={true} head={header} />\n    </React.Fragment>\n  ) : null;\n}\n\nconst mapStateToProps = (state:StoreType) => ({\n  items: state.items.items,\n  isInputActive: state.input.isInputActive,\n});\nconst App = connect(mapStateToProps)(localApp);\nexport default App;\n\n\nlocalApp.propTypes ={\n  isInputActive: PropTypes.bool,\n  items: PropTypes.array\n}"],"sourceRoot":""}