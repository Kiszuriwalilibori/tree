{"version":3,"sources":["components/AttemptToOverwriteExistingKeyWarning.tsx","components/NoAlphaNumericKeyWarning.tsx","components/AppendItemModal.tsx","components/DeleteItemButton.tsx","components/Tree.tsx","components/App.tsx"],"names":["AttemptToOverwriteExistingKeyWarning","React","props","isNotValidated","Alert","severity","AlertTitle","NoAlphaNumericKeyWarning","noAlpha","button","width","margin","AppendItemModal","connect","state","items","activeScope","input","dispatch","onSubmit","data","append","closeInput","onClose","useState","inputValue","setInputValue","setNoValidated","setNoAlpha","primary","useRef","className","e","preventDefault","containsAlphanumericKey","validateAgainstDuplicate","result","current","checked","TextField","required","size","label","variant","value","onChange","target","color","type","style","onClick","id","ref","htmlFor","MyIconButton","withStyles","root","transition","backgroundColor","IconButton","DeleteItemButton","removeItem","memo","string","header","click","useCallback","debounce","AppendItemButton","lazy","enhanced","Component","classInner","classOuter","distancer","TextItem","Element","ary","head","enhancedElement","Map","set","SecondaryHeaderText","Header","undefined","Tree","shift","HeadingElement","get","WrapperStyle","EnhancedElement","Fragment","map","item","key","fallback","EmptyLoader","App","isInputActive","criterias","_","cloneDeep"],"mappings":"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","file":"static/js/4.e3bb495b.chunk.js","sourcesContent":["import * as React from \"react\";\r\nimport { Alert, AlertTitle } from \"@material-ui/lab\";\r\nimport PropTypes from 'prop-types';\r\n\r\ninterface propsType{\r\n  isNotValidated:boolean\r\n}\r\nconst Warning = (props: propsType) => {\r\n  const {isNotValidated} = props;\r\n\r\n  return isNotValidated ? (\r\n    <Alert severity=\"error\">\r\n      <AlertTitle>Uwaga!!!</AlertTitle>\r\n      Takie kryterium już jest. Nie można dodać go po raz drugi.\r\n    </Alert>\r\n  ) : null;\r\n}\r\n\r\nexport const  AttemptToOverwriteExistingKeyWarning = React.memo(Warning);\r\n\r\nWarning.propTypes ={\r\n  isNotValidated: PropTypes.bool\r\n}","import * as React from \"react\";\r\nimport { Alert, AlertTitle } from \"@material-ui/lab\";\r\nimport PropTypes from 'prop-types';\r\n\r\ninterface WarningProps {\r\n  noAlpha: boolean;\r\n}\r\n\r\nconst Warning = (props:WarningProps) => {\r\n  const {noAlpha} =props;\r\n  return noAlpha ? (\r\n    <Alert severity=\"error\">\r\n      <AlertTitle>Uwaga!!!</AlertTitle>\r\n      Nazwa kryterium musi zawierać choć jeden znak alfanumeryczny.\r\n    </Alert>\r\n  ) : null;\r\n};\r\n\r\nexport const NoAlphaNumericKeyWarning =React.memo(Warning);\r\n\r\nWarning.propTypes ={\r\n  noAlpha: PropTypes.bool\r\n}\r\n\r\n","import React, { useState, useRef } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { TextField, Button } from \"@material-ui/core\";\r\nimport { closeInput } from \"../redux/input\";\r\nimport {append} from \"../redux/items\";\r\nimport { validateAgainstDuplicate} from \"../js/functions\";\r\nimport { containsAlphanumericKey } from \"../js/functions\";\r\nimport { AttemptToOverwriteExistingKeyWarning } from \"./AttemptToOverwriteExistingKeyWarning\";\r\nimport { NoAlphaNumericKeyWarning } from \"./NoAlphaNumericKeyWarning\";\r\nimport PropTypes from 'prop-types';\r\nimport {itemsType}from \"../redux/types\";\r\n\r\nconst button = { width: \"150px\", margin: \"0 auto\" };\r\n\r\ninterface appendProps {\r\n  onSubmit:Function,\r\n   onClose:Function,\r\n   items: (string |string[])[],\r\n   activeScope:string\r\n}\r\n\r\ninterface input {\r\n  current: null |any\r\n}\r\n\r\nconst UnconnectedAppendItemModal = (props:appendProps) => {\r\n\r\nconst { onSubmit, onClose, items, activeScope } = props;\r\n\r\nlet [inputValue, setInputValue] = useState(\"\");\r\nlet [isNotValidated, setNoValidated] = useState(false);\r\nlet [noAlpha, setNoAlpha] = useState(false);\r\n\r\nconst primary = items[0] === activeScope; //checks whether is in primary element\r\nconst input = useRef(null);\r\n\r\nconst submit = (e: { preventDefault: () => void; }) => {\r\n  e.preventDefault();\r\n\r\n  if (!containsAlphanumericKey(inputValue)) {\r\n    setNoAlpha((noAlpha = true)); // this state value toggles visibility of no-alphanumeric error message\r\n  } else {\r\n    if (validateAgainstDuplicate(items, [activeScope, inputValue])) {\r\n      //checks whether item is not yet in scheme\r\n      let result: string | string[] | input; //here will be stored result\r\n      if (primary && input.current) {\r\n        // in primary element one can initiate subtree belo\r\n        result = (input && input.current && input.current?.checked) ? [inputValue] : inputValue; //table will be processed to subtree while string to regular node\r\n      } else {\r\n        result = inputValue; // but in secondary element there is no option for subtree\r\n      }\r\n      onSubmit([activeScope, result]);\r\n    } else {\r\n      setNoValidated((isNotValidated = true));\r\n    }\r\n  }\r\n};\r\n\r\nconst close = (e) => {\r\n  e.preventDefault();\r\n  onClose();\r\n};\r\n\r\nreturn (\r\n  <div className=\"modal\">\r\n    <form className=\"modal-content\" onSubmit={submit}>\r\n      <AttemptToOverwriteExistingKeyWarning isNotValidated={isNotValidated} />\r\n      <NoAlphaNumericKeyWarning noAlpha={noAlpha} />\r\n      <span>Wpisz nowe kryterium</span>\r\n      <TextField required size=\"small\" label=\"Kryterium\" variant=\"outlined\" value={inputValue} onChange={(e) => setInputValue((inputValue = e.target.value))} />\r\n      <Button variant=\"contained\" size=\"large\" color=\"primary\" type=\"submit\" style={button}>\r\n        {\" \"}\r\n        Dodaj{\" \"}\r\n      </Button>\r\n      <Button variant=\"contained\" size=\"large\" style={button} color=\"secondary\" onClick={close}>\r\n        {\" \"}\r\n        Zamknij\r\n      </Button>\r\n      {primary ? (\r\n        <div>\r\n          <input className=\"styled-checkbox\" id=\"checkbox\" ref={input} type=\"checkbox\"></input>\r\n          <label htmlFor=\"checkbox\">Inicjować katalog?</label>\r\n        </div>\r\n      ) : null}\r\n    </form>\r\n  </div>\r\n);\r\n};\r\n\r\nconst mapStateToProps = (state: { items: { items: itemsType; }; input: { activeScope: string; }; }) => ({\r\n  items: state.items.items,\r\n  activeScope: state.input.activeScope,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: (arg0: { payload: itemsType; type: string; }) => void) => ({\r\n  onSubmit: (data:itemsType):void => {\r\n    dispatch(append(data)); \r\n    dispatch(closeInput())\r\n  },\r\n  onClose: () => dispatch(closeInput()),\r\n});\r\n\r\nexport const AppendItemModal = connect(mapStateToProps, mapDispatchToProps)(UnconnectedAppendItemModal);\r\n\r\nUnconnectedAppendItemModal.propTypes ={\r\n  onSubmit:PropTypes.func,\r\n  onClose:PropTypes.func,\r\n  items:PropTypes.array,\r\n  activeScope:PropTypes.string,\r\n}\r\n","// sends to store array with header of scope and string identifying item within scope\r\nimport React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport {debounce } from \"lodash\";\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { removeItem } from \"../redux/items\";\r\nimport { useCallback } from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\nconst iconColor ='#F15C6A';\r\nconst iconHoverColor ='rgba(241, 92, 106, 0.34)';\r\n\r\nconst MyIconButton = withStyles({\r\n  root: {\r\n    color: iconColor,\r\n    transition: \"background-color 0.5s ease-in-out\",\r\n    \"&:hover\":{backgroundColor: iconHoverColor,}\r\n  },\r\n  \r\n})(IconButton);\r\n\r\n\r\ninterface ButtonProps {\r\n  onClick: Function;\r\n  string: string;\r\n  header: string|undefined;\r\n}\r\n\r\nconst Button = (props:ButtonProps) => {\r\n  const { onClick, string, header } = props;\r\n\r\n  // const click = useCallback(\r\n  //   (e: React.MouseEvent<HTMLButtonElement>): void=> {\r\n  //     onClick([header, string]);\r\n  //   },\r\n  //   [header, string, onClick]\r\n  // );\r\n  \r\n  const click = useCallback(debounce(\r\n    (e: React.MouseEvent<HTMLButtonElement>): void=> {\r\n      onClick([header, string]);\r\n    },200),\r\n    [header, string, onClick]\r\n  );\r\n\r\n\r\n\r\n\r\n\r\n  return <MyIconButton onClick={click}>\r\n            <i className=\"fas fa-minus-circle delete\" >\r\n            </i>\r\n          </MyIconButton>;\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: (arg0: { payload: string[]; type: string; }) => void) => ({\r\n  onClick: (data:string[]):void => dispatch(removeItem(data)),\r\n});\r\n\r\nexport const DeleteItemButton = connect(null, mapDispatchToProps)(React.memo(Button));\r\n\r\nButton.propTypes ={\r\n  onClick: PropTypes.func,\r\n  string: PropTypes.string,\r\n  header:PropTypes.string\r\n}","//Header mógłby być funkcją przyjmującą dwa propsy i zawracającą komponent a nie obiekt\r\n\r\nimport React, { lazy, Suspense } from \"react\";\r\nimport { DeleteItemButton } from \"./DeleteItemButton\";\r\nimport EmptyLoader from \"./EmptyLoader\";\r\nimport PropTypes from 'prop-types';\r\n\r\ninterface headerPropsType{string:string}\r\ninterface textElementPropsType{string:string}\r\ninterface elementPropsType{string:string, header: string|undefined}\r\ninterface treePropsType{ary:string[], primary:boolean, head:string }\r\n\r\nconst AppendItemButton = lazy(() => import(\"./AppendItemButton\"));\r\n\r\n//HOC creating function\r\n//distancer is entity that renders horizontal line to the left of elements. class_outer and _inner wrap component accordingly\r\nconst enhanced = (Component, classInner ='', classOuter ='', distancer ='' ) => {\r\n  return (props) => (\r\n    <div className={classOuter}>\r\n      <div className={distancer}></div>\r\n      <div className={classInner}>\r\n        <Component {...props} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n//basic element -string within <span>\r\nconst TextItem = (props:textElementPropsType) => {\r\n  const { string } = props;\r\n  return <span className=\"TextItem\">{string}</span>;\r\n};\r\n\r\n//Element renders node of scheme which could be single criterium field or subtree of fields, depending of props.\r\n//If prop 'string' is string it renders single field, if not it renders subtree\r\n//header prop is not read here but passed to Delete component which removes field\r\n\r\nconst Element = (props:elementPropsType) => {\r\n  const { string, header } = props;\r\n  if (typeof string === \"string\") {\r\n    return (\r\n      <div className=\"element\">\r\n        <TextItem string={string} />\r\n        <DeleteItemButton string={string} header={header} />\r\n      </div>\r\n    );\r\n  } else {\r\n    return <Tree ary={string} primary={false} head={''} />;\r\n  }\r\n};\r\n\r\n//object that returns calls to enhancer together with two sets of parameters\r\n//In this project case tree cand be only main or subtree and boolean fits well, in more complex case the prop shpuld be more flexible.\r\nlet enhancedElement =new Map();\r\nenhancedElement.set(true,enhanced(Element, \"wrapper-primary\", \"wrapper-primary-outer\", \"distancer\"));\r\nenhancedElement.set(false,enhanced(Element, \"wrapper-secondary\", \"wrapper-secondary-outer\", \"distancer\"));\r\n\r\n//enhancer wrapps Text Item with class suitable for subtree header\r\nconst SecondaryHeaderText = enhanced(TextItem, \"wrapper-secondary\");\r\n\r\nlet Header = new Map();\r\nHeader.set(true, enhanced(TextItem, \"top-header\"));\r\nHeader.set(false, function (props:headerPropsType) {\r\n      const { string } = props;\r\n      return (\r\n        <div className=\"element\">\r\n          <SecondaryHeaderText string={string} />\r\n          <DeleteItemButton string={string} header ={undefined}/>\r\n        </div>\r\n      );\r\n    }\r\n)\r\n\r\n//Tree is quite versatile component that renders both main scheme and subtree\r\n// Prop 'primary' keeps information (as boolean) whether its main scheme or its subtree and rules its behavior and view.\r\n\r\nexport const Tree = (props:treePropsType) => {\r\n  const { ary, primary, head } = props;\r\n  const header = primary ? head : ary.shift();\r\n  const HeadingElement = Header.get(primary);\r\n  const WrapperStyle = primary ? \"contentWrapperPrimary\" : \"contentWrapperSecondary\";\r\n  const EnhancedElement = enhancedElement.get(primary);\r\n\r\n  return ary ? (\r\n    <React.Fragment>\r\n      <HeadingElement string={header} />\r\n      <div className={WrapperStyle}>\r\n        {ary.map((item) => (\r\n          <EnhancedElement key={item} string={item} header={header} />\r\n        ))}\r\n        <Suspense fallback={EmptyLoader()}>\r\n          <AppendItemButton string={header} primary={primary} />\r\n        </Suspense>\r\n      </div>\r\n    </React.Fragment>\r\n  ) : null;\r\n};\r\n\r\n\r\nTree.propTypes ={\r\n  ary: PropTypes.array,\r\n  primary: PropTypes.bool,\r\n  head:PropTypes.string,\r\n}\r\n","import React from \"react\";\nimport _ from \"lodash\";\nimport { connect } from \"react-redux\";\nimport { AppendItemModal } from \"./AppendItemModal\";\nimport { Tree } from \"./Tree\";\nimport {StoreType} from \"../redux/types\";\nimport PropTypes from 'prop-types';\n\nfunction localApp(props: { items; isInputActive: boolean; }) {\n\n  const { items, isInputActive } = props;\n  const criterias = _.cloneDeep(items);\n  const header = criterias.shift();\n\n  return items ? (\n    <React.Fragment>\n      {isInputActive ? <AppendItemModal /> : null}\n      <Tree ary={criterias} primary={true} head={header} />\n    </React.Fragment>\n  ) : null;\n}\n\nconst mapStateToProps = (state:StoreType) => ({\n  items: state.items.items,\n  isInputActive: state.input.isInputActive,\n});\nconst App = connect(mapStateToProps)(localApp);\nexport default App;\n\n\nlocalApp.propTypes ={\n  isInputActive: PropTypes.bool,\n  items: PropTypes.array\n}"],"sourceRoot":""}