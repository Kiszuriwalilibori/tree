{"version":3,"sources":["components/DuplicateWarning.tsx","components/InvalidTextWarning.tsx","components/AppendItemModal.tsx","components/DeleteItemButton/styles.tsx","components/DeleteItemButton/DeleteItemButton.tsx","components/Tree.tsx","components/App.tsx"],"names":["DuplicateWarning","React","props","isNotValidated","Alert","severity","AlertTitle","InvalidTextWarning","noAlpha","AppendItemModal","connect","state","items","activeScope","input","dispatch","onSubmit","data","append","closeInput","onClose","primary","useFormik","initialValues","inputValue","shouldInitializeCategory","validationSchema","Yup","shape","matches","required","values","actions","result","validateAgainstDuplicate","setSubmitting","setFieldValue","handleSubmit","getFieldProps","submitCount","errors","className","Boolean","Object","keys","length","TextField","size","label","variant","color","type","onClick","e","preventDefault","id","htmlFor","IconButton","withStyles","root","transition","backgroundColor","Button","DeleteItemButton","removeItem","string","header","click","debounce","AppendItemButton","lazy","enhanced","Component","classInner","classOuter","distancer","TextItem","Element","ary","head","enhancedElement","Map","set","SecondaryHeaderText","Header","undefined","Tree","shift","HeadingElement","get","WrapperStyle","EnhancedElement","Fragment","map","item","key","fallback","EmptyLoader","App","isInputActive","criterias","_","cloneDeep"],"mappings":"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","file":"static/js/4.8a7db329.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport { Alert, AlertTitle } from '@material-ui/lab';\r\nimport PropTypes from 'prop-types';\r\n\r\ninterface propsType {\r\n    isNotValidated: boolean;\r\n}\r\n/**\r\n * @description displays warning about criteria duplication\r\n * @param isNotValidated if tru - means that validation failed\r\n * @returns modal component\r\n */\r\nconst Warning = (props: propsType): JSX.Element => {\r\n    const { isNotValidated } = props;\r\n\r\n    return isNotValidated ? (\r\n        <Alert severity=\"error\">\r\n            <AlertTitle>Uwaga!!!</AlertTitle>\r\n            Takie kryterium już jest. Nie można dodać go po raz drugi.\r\n        </Alert>\r\n    ) : null;\r\n};\r\n\r\nconst DuplicateWarning = React.memo(Warning);\r\n\r\nexport default DuplicateWarning;\r\nWarning.propTypes = {\r\n    isNotValidated: PropTypes.bool,\r\n};\r\n","import * as React from 'react';\r\nimport { Alert, AlertTitle } from '@material-ui/lab';\r\nimport PropTypes from 'prop-types';\r\n\r\ninterface WarningProps {\r\n    noAlpha: boolean;\r\n}\r\n\r\nconst Warning = (props: WarningProps) => {\r\n    const { noAlpha } = props;\r\n    return noAlpha ? (\r\n        <Alert severity=\"error\">\r\n            <AlertTitle>Uwaga!!!</AlertTitle>\r\n            Nazwa kryterium musi zawierać choć jeden znak alfanumeryczny.\r\n        </Alert>\r\n    ) : null;\r\n};\r\n\r\nconst InvalidTextWarning = React.memo(Warning);\r\nexport default InvalidTextWarning;\r\nWarning.propTypes = {\r\n    noAlpha: PropTypes.bool,\r\n};\r\n","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { TextField, Button } from '@material-ui/core';\r\nimport { closeInput } from '../redux/input';\r\nimport { append } from '../redux/items';\r\nimport { validateAgainstDuplicate } from '../js/functions';\r\nimport DuplicateWarning from './DuplicateWarning';\r\nimport InvalidTextWarning from './InvalidTextWarning';\r\nimport PropTypes from 'prop-types';\r\nimport { itemsType } from '../redux/types';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup';\r\n\r\ninterface appendProps {\r\n    onSubmit: Function;\r\n    onClose: Function;\r\n    items: (string | string[])[];\r\n    activeScope: string;\r\n}\r\n\r\ninterface input {\r\n    current: null | any;\r\n}\r\n\r\nconst button = { width: '150px', margin: '0 auto' };\r\n\r\n/**\r\n * @description Renders the modal for adding a new node\r\n * @param {Function} onSubmit the function which adds node\r\n * @param {Function} onClose the function which closes the modal\r\n * @param {(string | string[])[]} items all tre items, including subtree\r\n * @param {string} activeScope represents subtree or main tree to which item should be added\r\n * @returns modal component\r\n */\r\nconst Modal = (props: appendProps): JSX.Element => {\r\n    const { onSubmit, onClose, items, activeScope } = props;\r\n    const primary = items[0] === activeScope;\r\n    const close = (e: { preventDefault: () => void }) => {\r\n        e.preventDefault();\r\n        onClose();\r\n    };\r\n\r\n    const {\r\n        values: { inputValue, isNotValidated, shouldInitializeCategory },\r\n        handleSubmit,\r\n        getFieldProps,\r\n        submitCount,\r\n        errors,\r\n    } = useFormik({\r\n        initialValues: {\r\n            inputValue: '',\r\n            isNotValidated: false,\r\n            shouldInitializeCategory: false,\r\n        },\r\n        validationSchema: Yup.object().shape({\r\n            inputValue: Yup.string()\r\n                .matches(/\\d|[A-z]/, 'Kryterium musi zawierać choć jeden znak alfanumeryczny')\r\n                .required('Required'),\r\n        }),\r\n        onSubmit(values, actions) {\r\n            if (validateAgainstDuplicate(items, [activeScope, inputValue])) {\r\n                let result: string | string[] | input;\r\n                if (primary) {\r\n                    result = shouldInitializeCategory ? [inputValue] : inputValue;\r\n                } else {\r\n                    result = values.inputValue;\r\n                }\r\n                onSubmit([activeScope, result]);\r\n                actions.setSubmitting(false);\r\n            } else {\r\n                actions.setFieldValue('isNotValidated', true);\r\n                actions.setSubmitting(false);\r\n            }\r\n        },\r\n    });\r\n\r\n    return (\r\n        <div className=\"modal\">\r\n            <form className=\"modal-content\" onSubmit={handleSubmit}>\r\n                <DuplicateWarning isNotValidated={isNotValidated} />\r\n                <InvalidTextWarning noAlpha={Boolean(Object.keys(errors).length && submitCount)} />\r\n                <span>Wpisz nowe kryterium</span>\r\n                <TextField\r\n                    required\r\n                    size=\"small\"\r\n                    label=\"Kryterium\"\r\n                    variant=\"outlined\"\r\n                    {...getFieldProps('inputValue')}\r\n                />\r\n                <Button\r\n                    variant=\"contained\"\r\n                    size=\"large\"\r\n                    color=\"primary\"\r\n                    type=\"submit\"\r\n                    className=\"modal-content__button\"\r\n                >\r\n                    Dodaj\r\n                </Button>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    size=\"large\"\r\n                    className=\"modal-content__button\"\r\n                    color=\"secondary\"\r\n                    onClick={close}\r\n                >\r\n                    Zamknij\r\n                </Button>\r\n                {primary ? (\r\n                    <div>\r\n                        <input\r\n                            className=\"styled-checkbox\"\r\n                            id=\"checkbox\"\r\n                            type=\"checkbox\"\r\n                            {...getFieldProps('shouldInitializeCategory')}\r\n                        ></input>\r\n                        <label htmlFor=\"checkbox\">Inicjować katalog?</label>\r\n                    </div>\r\n                ) : null}\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: { items: { items: itemsType }; input: { activeScope: string } }) => ({\r\n    items: state.items.items,\r\n    activeScope: state.input.activeScope,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: (arg0: { payload: itemsType; type: string }) => void) => ({\r\n    onSubmit: (data: itemsType): void => {\r\n        dispatch(append(data));\r\n        dispatch(closeInput());\r\n    },\r\n    onClose: () => dispatch(closeInput()),\r\n});\r\n\r\nexport const AppendItemModal = connect(mapStateToProps, mapDispatchToProps)(Modal);\r\n\r\nModal.propTypes = {\r\n    onSubmit: PropTypes.func,\r\n    onClose: PropTypes.func,\r\n    items: PropTypes.array,\r\n    activeScope: PropTypes.string,\r\n};\r\n","import { withStyles } from '@material-ui/core/styles';\r\nimport { default as Button } from '@material-ui/core/IconButton';\r\n\r\nconst iconColor = '#F15C6A';\r\nconst iconHoverColor = 'rgba(241, 92, 106, 0.34)';\r\n\r\nconst IconButton = withStyles({\r\n    root: {\r\n        color: iconColor,\r\n        transition: 'background-color 0.5s ease-in-out',\r\n        '&:hover': { backgroundColor: iconHoverColor },\r\n    },\r\n})(Button);\r\n\r\nexport default IconButton;\r\n","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { debounce } from 'lodash';\r\nimport { removeItem } from '../../redux/items';\r\nimport PropTypes from 'prop-types';\r\nimport IconButton from './styles';\r\n\r\ninterface ButtonProps {\r\n    onClick: Function;\r\n    string: string;\r\n    header: string | undefined;\r\n}\r\n\r\n/**\r\n * Renders the button which removes a node when clicked\r\n * @param {Function} onClick the function which does the job\r\n * @param {string} string   indicates node (its text content) to be removed\r\n * @param {string |undefined} header indicates subtree/scope to which node blonggs, if any\r\n * @returns button component\r\n */\r\nconst Button = (props: ButtonProps) => {\r\n    const { onClick, string, header } = props;\r\n\r\n    const click = React.useCallback(\r\n        debounce((e: React.MouseEvent<HTMLButtonElement>): void => {\r\n            onClick([header, string]);\r\n        }, 200),\r\n        [header, string, onClick],\r\n    );\r\n\r\n    return (\r\n        <IconButton onClick={click}>\r\n            <i className=\"fas fa-minus-circle delete\"></i>\r\n        </IconButton>\r\n    );\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: (arg0: { payload: string[]; type: string }) => void) => ({\r\n    onClick: (data: string[]): void => dispatch(removeItem(data)),\r\n});\r\n\r\nconst DeleteItemButton = connect(null, mapDispatchToProps)(React.memo(Button));\r\nexport default DeleteItemButton;\r\n\r\nButton.propTypes = {\r\n    onClick: PropTypes.func,\r\n    string: PropTypes.string,\r\n    header: PropTypes.string,\r\n};\r\n","//Header mógłby być funkcją przyjmującą dwa propsy i zawracającą komponent a nie obiekt\r\n\r\nimport React, { lazy, Suspense } from 'react';\r\nimport DeleteItemButton from './DeleteItemButton';\r\nimport EmptyLoader from './EmptyLoader';\r\nimport PropTypes from 'prop-types';\r\n\r\ninterface headerPropsType {\r\n    string: string;\r\n}\r\ninterface textElementPropsType {\r\n    string: string;\r\n}\r\ninterface elementPropsType {\r\n    string: string;\r\n    header: string | undefined;\r\n}\r\ninterface treePropsType {\r\n    ary: string[];\r\n    primary: boolean;\r\n    head: string;\r\n}\r\n\r\nconst AppendItemButton = lazy(() => import('./AppendItemButton'));\r\n\r\n//HOC creating function\r\n//distancer is entity that renders horizontal line to the left of elements. class_outer and _inner wrap component accordingly\r\nconst enhanced = (Component, classInner = '', classOuter = '', distancer = '') => {\r\n    return props => (\r\n        <div className={classOuter}>\r\n            <div className={distancer}></div>\r\n            <div className={classInner}>\r\n                <Component {...props} />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n//basic element -string within <span>\r\nconst TextItem = (props: textElementPropsType) => {\r\n    const { string } = props;\r\n    return <span className=\"TextItem\">{string}</span>;\r\n};\r\n\r\n//Element renders node of scheme which could be single criterium field or subtree of fields, depending of props.\r\n//If prop 'string' is string it renders single field, if not it renders subtree\r\n//header prop is not read here but passed to Delete component which removes field\r\n\r\nconst Element = (props: elementPropsType) => {\r\n    const { string, header } = props;\r\n    if (typeof string === 'string') {\r\n        return (\r\n            <div className=\"element\">\r\n                <TextItem string={string} />\r\n                <DeleteItemButton string={string} header={header} />\r\n            </div>\r\n        );\r\n    } else {\r\n        return <Tree ary={string} primary={false} head={''} />;\r\n    }\r\n};\r\n\r\n//object that returns calls to enhancer together with two sets of parameters\r\n//In this project case tree cand be only main or subtree and boolean fits well, in more complex case the prop shpuld be more flexible.\r\nlet enhancedElement = new Map();\r\nenhancedElement.set(true, enhanced(Element, 'wrapper-primary', 'wrapper-primary-outer', 'distancer'));\r\nenhancedElement.set(false, enhanced(Element, 'wrapper-secondary', 'wrapper-secondary-outer', 'distancer'));\r\n\r\n//enhancer wrapps Text Item with class suitable for subtree header\r\nconst SecondaryHeaderText = enhanced(TextItem, 'wrapper-secondary');\r\n\r\nlet Header = new Map();\r\nHeader.set(true, enhanced(TextItem, 'top-header'));\r\nHeader.set(false, function (props: headerPropsType) {\r\n    const { string } = props;\r\n    return (\r\n        <div className=\"element\">\r\n            <SecondaryHeaderText string={string} />\r\n            <DeleteItemButton string={string} header={undefined} />\r\n        </div>\r\n    );\r\n});\r\n\r\n//Tree is quite versatile component that renders both main scheme and subtree\r\n// Prop 'primary' keeps information (as boolean) whether its main scheme or its subtree and rules its behavior and view.\r\n\r\nexport const Tree = (props: treePropsType) => {\r\n    const { ary, primary, head } = props;\r\n    const header = primary ? head : ary.shift();\r\n    const HeadingElement = Header.get(primary);\r\n    const WrapperStyle = primary ? 'contentWrapperPrimary' : 'contentWrapperSecondary';\r\n    const EnhancedElement = enhancedElement.get(primary);\r\n\r\n    return ary ? (\r\n        <React.Fragment>\r\n            <HeadingElement string={header} />\r\n            <div className={WrapperStyle}>\r\n                {ary.map(item => (\r\n                    <EnhancedElement key={item} string={item} header={header} />\r\n                ))}\r\n                <Suspense fallback={EmptyLoader()}>\r\n                    <AppendItemButton string={header} primary={primary} />\r\n                </Suspense>\r\n            </div>\r\n        </React.Fragment>\r\n    ) : null;\r\n};\r\n\r\nTree.propTypes = {\r\n    ary: PropTypes.array,\r\n    primary: PropTypes.bool,\r\n    head: PropTypes.string,\r\n};\r\n","import React from \"react\";\nimport _ from \"lodash\";\nimport { connect } from \"react-redux\";\nimport { AppendItemModal } from \"./AppendItemModal\";\nimport { Tree } from \"./Tree\";\nimport {StoreType} from \"../redux/types\";\nimport PropTypes from 'prop-types';\n\nfunction localApp(props: { items; isInputActive: boolean; }) {\n\n  const { items, isInputActive } = props;\n  const criterias = _.cloneDeep(items);\n  const header = criterias.shift();\n\n  return items ? (\n    <React.Fragment>\n      {isInputActive ? <AppendItemModal /> : null}\n      <Tree ary={criterias} primary={true} head={header} />\n    </React.Fragment>\n  ) : null;\n}\n\nconst mapStateToProps = (state:StoreType) => ({\n  items: state.items.items,\n  isInputActive: state.input.isInputActive,\n});\nconst App = connect(mapStateToProps)(localApp);\nexport default App;\n\n\nlocalApp.propTypes ={\n  isInputActive: PropTypes.bool,\n  items: PropTypes.array\n}"],"sourceRoot":""}