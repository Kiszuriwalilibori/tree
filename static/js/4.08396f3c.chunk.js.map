{"version":3,"sources":["components/DuplicateWarning.tsx","components/InvalidTextWarning.tsx","components/AppendItemModal.tsx","components/DeleteItemButton/styles.tsx","components/DeleteItemButton/DeleteItemButton.tsx","hooks/createDebouncedCallback.js","components/Tree.tsx","components/App.tsx","hooks/useDispatchAction.ts"],"names":["Warning","props","isNotValidated","Alert","severity","AlertTitle","DuplicateWarning","React","noAlpha","InvalidTextWarning","AppendItemModal","connect","state","items","activeScope","input","console","log","primary","useDispatchAction","closeInput","appendItem","useFormik","initialValues","inputValue","shouldInitializeCategory","validationSchema","Yup","shape","matches","required","onSubmit","values","actions","result","validateAgainstDuplicate","setSubmitting","setFieldValue","handleSubmit","getFieldProps","submitCount","errors","className","Boolean","Object","keys","length","TextField","size","label","variant","color","type","onClick","id","htmlFor","IconButton","withStyles","root","transition","backgroundColor","Button","fn","args","string","header","removeItem","handleClick","useCallback","debounce","DeleteItemButton","AppendItemButton","lazy","enhanced","Component","classInner","classOuter","distancer","TextItem","Element","ary","head","enhancedElement","Map","set","SecondaryHeaderText","Header","undefined","Tree","shift","HeadingElement","get","WrapperStyle","EnhancedElement","Fragment","map","item","fallback","EmptyLoader","App","isInputActive","criterias","_","cloneDeep","dispatch","useDispatch","bindActionCreators","actionCreators"],"mappings":"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","file":"static/js/4.08396f3c.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport { Alert, AlertTitle } from '@material-ui/lab';\r\nimport PropTypes from 'prop-types';\r\n\r\ninterface propsType {\r\n    isNotValidated: boolean;\r\n}\r\n/**\r\n * @description displays warning about criteria duplication\r\n * @param isNotValidated if tru - means that validation failed\r\n * @returns modal component\r\n */\r\nconst Warning = (props: propsType): JSX.Element => {\r\n    const { isNotValidated } = props;\r\n\r\n    return isNotValidated ? (\r\n        <Alert severity=\"error\">\r\n            <AlertTitle>Uwaga!!!</AlertTitle>\r\n            Takie kryterium już jest. Nie można dodać go po raz drugi.\r\n        </Alert>\r\n    ) : null;\r\n};\r\n\r\nconst DuplicateWarning = React.memo(Warning);\r\n\r\nexport default DuplicateWarning;\r\nWarning.propTypes = {\r\n    isNotValidated: PropTypes.bool,\r\n};\r\n","import * as React from 'react';\r\nimport { Alert, AlertTitle } from '@material-ui/lab';\r\nimport PropTypes from 'prop-types';\r\n\r\ninterface WarningProps {\r\n    noAlpha: boolean;\r\n}\r\n\r\nconst Warning = (props: WarningProps) => {\r\n    const { noAlpha } = props;\r\n    return noAlpha ? (\r\n        <Alert severity=\"error\">\r\n            <AlertTitle>Uwaga!!!</AlertTitle>\r\n            Nazwa kryterium musi zawierać choć jeden znak alfanumeryczny.\r\n        </Alert>\r\n    ) : null;\r\n};\r\n\r\nconst InvalidTextWarning = React.memo(Warning);\r\nexport default InvalidTextWarning;\r\nWarning.propTypes = {\r\n    noAlpha: PropTypes.bool,\r\n};\r\n","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { TextField, Button } from '@material-ui/core';\r\nimport { validateAgainstDuplicate } from '../js/functions';\r\nimport DuplicateWarning from './DuplicateWarning';\r\nimport InvalidTextWarning from './InvalidTextWarning';\r\nimport PropTypes from 'prop-types';\r\nimport { itemType } from '../redux/types';\r\nimport { RootStateType } from '../index';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport useDispatchAction from '../hooks/useDispatchAction';\r\n\r\ninterface appendProps {\r\n    items: (string | string[])[];\r\n    activeScope: string;\r\n}\r\n\r\ninterface input {\r\n    current: null | any;\r\n}\r\n\r\n/**\r\n * @description Renders the modal for adding a new node\r\n * @param {Function} onSubmit the function which adds node\r\n * @param {Function} onClose the function which closes the modal\r\n * @param {(string | string[])[]} items all tre items, including subtree\r\n * @param {string} activeScope represents subtree or main tree to which item should be added\r\n * @returns modal component\r\n */\r\nconst Modal = (props: appendProps): JSX.Element => {\r\n    const { items, activeScope } = props;\r\n    console.log(activeScope, 'activescope');\r\n    const primary = items[0] === activeScope;\r\n    const { closeInput, appendItem } = useDispatchAction();\r\n\r\n    const {\r\n        values: { inputValue, isNotValidated, shouldInitializeCategory },\r\n        handleSubmit,\r\n        getFieldProps,\r\n        submitCount,\r\n        errors,\r\n    } = useFormik({\r\n        initialValues: {\r\n            inputValue: '',\r\n            isNotValidated: false,\r\n            shouldInitializeCategory: false,\r\n        },\r\n        validationSchema: Yup.object().shape({\r\n            inputValue: Yup.string()\r\n                .matches(/\\d|[A-z]/, 'Kryterium musi zawierać choć jeden znak alfanumeryczny')\r\n                .required('Required'),\r\n        }),\r\n        onSubmit(values, actions) {\r\n            if (validateAgainstDuplicate(items, [activeScope, inputValue])) {\r\n                let result: itemType | input;\r\n                if (primary) {\r\n                    result = shouldInitializeCategory ? [inputValue] : inputValue;\r\n                } else {\r\n                    result = values.inputValue;\r\n                }\r\n\r\n                appendItem([activeScope, result]);\r\n                closeInput();\r\n\r\n                actions.setSubmitting(false);\r\n            } else {\r\n                actions.setFieldValue('isNotValidated', true);\r\n                actions.setSubmitting(false);\r\n            }\r\n        },\r\n    });\r\n\r\n    return (\r\n        <div className=\"modal\">\r\n            <form className=\"modal-content\" onSubmit={handleSubmit}>\r\n                <DuplicateWarning isNotValidated={isNotValidated} />\r\n                <InvalidTextWarning noAlpha={Boolean(Object.keys(errors).length && submitCount)} />\r\n                <span>Wpisz nowe kryterium</span>\r\n                <TextField\r\n                    required\r\n                    size=\"small\"\r\n                    label=\"Kryterium\"\r\n                    variant=\"outlined\"\r\n                    {...getFieldProps('inputValue')}\r\n                />\r\n                <Button\r\n                    variant=\"contained\"\r\n                    size=\"large\"\r\n                    color=\"primary\"\r\n                    type=\"submit\"\r\n                    className=\"modal-content__button\"\r\n                >\r\n                    Dodaj\r\n                </Button>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    size=\"large\"\r\n                    className=\"modal-content__button\"\r\n                    color=\"secondary\"\r\n                    onClick={() => {\r\n                        closeInput();\r\n                    }}\r\n                >\r\n                    Zamknij\r\n                </Button>\r\n                {primary ? (\r\n                    <div>\r\n                        <input\r\n                            className=\"styled-checkbox\"\r\n                            id=\"checkbox\"\r\n                            type=\"checkbox\"\r\n                            {...getFieldProps('shouldInitializeCategory')}\r\n                        ></input>\r\n                        <label htmlFor=\"checkbox\">Inicjować katalog?</label>\r\n                    </div>\r\n                ) : null}\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: RootStateType) => ({\r\n    items: state.items.items,\r\n    activeScope: state.input.activeScope,\r\n});\r\n\r\nexport const AppendItemModal = connect(mapStateToProps, null)(Modal);\r\n\r\nModal.propTypes = {\r\n    items: PropTypes.array,\r\n    activeScope: PropTypes.string,\r\n};\r\n","import { withStyles } from '@material-ui/core/styles';\r\nimport { default as Button } from '@material-ui/core/IconButton';\r\n\r\nconst iconColor = '#F15C6A';\r\nconst iconHoverColor = 'rgba(241, 92, 106, 0.34)';\r\n\r\nconst IconButton = withStyles({\r\n    root: {\r\n        color: iconColor,\r\n        transition: 'background-color 0.5s ease-in-out',\r\n        '&:hover': { backgroundColor: iconHoverColor },\r\n    },\r\n})(Button);\r\n\r\nexport default IconButton;\r\n","import * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport IconButton from './styles';\r\nimport useDispatchAction from '../../hooks/useDispatchAction';\r\nimport { useDebouncedCallback } from '../../hooks/createDebouncedCallback';\r\ninterface ButtonProps {\r\n    string: string;\r\n    header: string | undefined;\r\n}\r\n\r\n/**\r\n * Renders the button which removes a node when clicked\r\n * @param {string} string   indicates node (its text content) to be removed\r\n * @param {string |undefined} header indicates subtree/scope to which node blonggs, if any\r\n * @returns button component\r\n */\r\nconst Button = (props: ButtonProps) => {\r\n    const { string, header } = props;\r\n    const { removeItem } = useDispatchAction();\r\n    const handleClick = useDebouncedCallback(removeItem, [header, string]);\r\n\r\n    return (\r\n        <IconButton onClick={handleClick}>\r\n            <i className=\"fas fa-minus-circle delete\"></i>\r\n        </IconButton>\r\n    );\r\n};\r\n\r\nconst DeleteItemButton = React.memo(Button);\r\nexport default DeleteItemButton;\r\n\r\nButton.propTypes = {\r\n    string: PropTypes.string,\r\n    header: PropTypes.string,\r\n};\r\n","import { useCallback } from 'react';\r\nimport debounce from 'lodash/debounce';\r\n\r\nexport const useDebouncedCallback = (fn, args) => {\r\n    const result = useCallback(\r\n        debounce(() => {\r\n            fn(args);\r\n        }, 200),\r\n        [fn],\r\n    );\r\n    return result;\r\n};\r\n","//Header mógłby być funkcją przyjmującą dwa propsy i zawracającą komponent a nie obiekt\r\n\r\nimport React, { lazy, Suspense } from 'react';\r\nimport DeleteItemButton from './DeleteItemButton';\r\nimport EmptyLoader from './EmptyLoader';\r\nimport PropTypes from 'prop-types';\r\n\r\ninterface headerPropsType {\r\n    string: string;\r\n}\r\ninterface textElementPropsType {\r\n    string: string;\r\n}\r\ninterface elementPropsType {\r\n    string: string;\r\n    header: string | undefined;\r\n}\r\ninterface treePropsType {\r\n    ary: string[];\r\n    primary: boolean;\r\n    head: string;\r\n}\r\n\r\nconst AppendItemButton = lazy(() => import('./AppendItemButton'));\r\n\r\n//HOC creating function\r\n//distancer is entity that renders horizontal line to the left of elements. class_outer and _inner wrap component accordingly\r\nconst enhanced = (Component, classInner = '', classOuter = '', distancer = '') => {\r\n    return props => (\r\n        <div className={classOuter}>\r\n            <div className={distancer}></div>\r\n            <div className={classInner}>\r\n                <Component {...props} />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n//basic element -string within <span>\r\nconst TextItem = (props: textElementPropsType) => {\r\n    const { string } = props;\r\n    return <span className=\"TextItem\">{string}</span>;\r\n};\r\n\r\n//Element renders node of scheme which could be single criterium field or subtree of fields, depending of props.\r\n//If prop 'string' is string it renders single field, if not it renders subtree\r\n//header prop is not read here but passed to Delete component which removes field\r\n\r\nconst Element = (props: elementPropsType) => {\r\n    const { string, header } = props;\r\n    if (typeof string === 'string') {\r\n        return (\r\n            <div className=\"element\">\r\n                <TextItem string={string} />\r\n                <DeleteItemButton string={string} header={header} />\r\n            </div>\r\n        );\r\n    } else {\r\n        return <Tree ary={string} primary={false} head={''} />;\r\n    }\r\n};\r\n\r\n//object that returns calls to enhancer together with two sets of parameters\r\n//In this project case tree cand be only main or subtree and boolean fits well, in more complex case the prop shpuld be more flexible.\r\nlet enhancedElement = new Map();\r\nenhancedElement.set(true, enhanced(Element, 'wrapper-primary', 'wrapper-primary-outer', 'distancer'));\r\nenhancedElement.set(false, enhanced(Element, 'wrapper-secondary', 'wrapper-secondary-outer', 'distancer'));\r\n\r\n//enhancer wrapps Text Item with class suitable for subtree header\r\nconst SecondaryHeaderText = enhanced(TextItem, 'wrapper-secondary');\r\n\r\nlet Header = new Map();\r\nHeader.set(true, enhanced(TextItem, 'top-header'));\r\nHeader.set(false, function (props: headerPropsType) {\r\n    const { string } = props;\r\n    return (\r\n        <div className=\"element\">\r\n            <SecondaryHeaderText string={string} />\r\n            <DeleteItemButton string={string} header={undefined} />\r\n        </div>\r\n    );\r\n});\r\n\r\n//Tree is quite versatile component that renders both main scheme and subtree\r\n// Prop 'primary' keeps information (as boolean) whether its main scheme or its subtree and rules its behavior and view.\r\n\r\nexport const Tree = (props: treePropsType) => {\r\n    const { ary, primary, head } = props;\r\n    const header = primary ? head : ary.shift();\r\n    const HeadingElement = Header.get(primary);\r\n    const WrapperStyle = primary ? 'contentWrapperPrimary' : 'contentWrapperSecondary';\r\n    const EnhancedElement = enhancedElement.get(primary);\r\n\r\n    return ary ? (\r\n        <React.Fragment>\r\n            <HeadingElement string={header} />\r\n            <div className={WrapperStyle}>\r\n                {ary.map(item => (\r\n                    <EnhancedElement key={item} string={item} header={header} />\r\n                ))}\r\n                <Suspense fallback={EmptyLoader()}>\r\n                    <AppendItemButton string={header} primary={primary} />\r\n                </Suspense>\r\n            </div>\r\n        </React.Fragment>\r\n    ) : null;\r\n};\r\n\r\nTree.propTypes = {\r\n    ary: PropTypes.array,\r\n    primary: PropTypes.bool,\r\n    head: PropTypes.string,\r\n};\r\n","import React from 'react';\nimport _ from 'lodash';\nimport { connect } from 'react-redux';\nimport { AppendItemModal } from './AppendItemModal';\nimport { Tree } from './Tree';\nimport PropTypes from 'prop-types';\nimport { RootStateType } from '../index';\ninterface PropsTypes {\n    items: any;\n    isInputActive: boolean;\n}\nfunction localApp(props: PropsTypes) {\n    const { items, isInputActive } = props;\n\n    const criterias = _.cloneDeep(items);\n    const header = criterias.shift();\n\n    return items ? (\n        <React.Fragment>\n            {isInputActive ? <AppendItemModal /> : null}\n            <Tree ary={criterias} primary={true} head={header} />\n        </React.Fragment>\n    ) : null;\n}\n\nconst mapStateToProps = (state: RootStateType) => ({\n    items: state.items.items,\n    isInputActive: state.input.isInputActive,\n});\nconst App = connect(mapStateToProps)(localApp);\nexport default App;\n\nlocalApp.propTypes = {\n    isInputActive: PropTypes.bool,\n    items: PropTypes.array,\n};\n","import { useDispatch } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport { actionCreators } from '../redux';\r\n\r\nconst useDispatchAction = () => {\r\n    const dispatch = useDispatch();\r\n    return bindActionCreators(actionCreators, dispatch);\r\n};\r\n\r\nexport default useDispatchAction;\r\n"],"sourceRoot":""}