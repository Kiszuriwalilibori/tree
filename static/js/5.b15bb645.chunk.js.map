{"version":3,"sources":["components/AppendItemButton.tsx"],"names":["AppendItemButton","connect","dispatch","onClick","data","initAppend","React","props","string","primary","handleClick","useCallback","e","className","role-label"],"mappings":"8FAAA,kCA2CMA,EAAmBC,YAAQ,MAJN,SAACC,GAAD,MAAoE,CAC3FC,QAAS,SAACC,GAAD,OAA0BF,EAASG,YAAWD,QAGlCH,CAAkCK,QAxB5C,SAACC,GAAwB,IAC5BJ,EAA6BI,EAA7BJ,QAASK,EAAoBD,EAApBC,OAAQC,EAAYF,EAAZE,QACnBC,EAAcC,uBAChB,SAACC,GACGT,EAAQK,KAEZ,CAACL,EAASK,IAGd,OACI,0BACIK,UAAWJ,EAAU,iBAAmB,mBACxCN,QAASO,EACTI,aAAW,iBAEX,uBAAKD,UAAU,uBAUZb","file":"static/js/5.b15bb645.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { initAppend } from '../redux/input';\r\nimport { useCallback } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\ninterface ButtonProps {\r\n    onClick: Function;\r\n    string: string | string[];\r\n    primary: boolean;\r\n}\r\n\r\n/**\r\n * Renders the button which initializes creation of new node\r\n * @param {Function} onClick the function which does the job\r\n * @param {string} string   indicates node (its text content) to be created\r\n * @param {boolean} primary defines whether givennode is primary(directly in main tree) or not\r\n * @returns button component\r\n */\r\nconst Button = (props: ButtonProps) => {\r\n    const { onClick, string, primary } = props;\r\n    const handleClick = useCallback(\r\n        (e: React.MouseEvent<HTMLButtonElement>): void => {\r\n            onClick(string);\r\n        },\r\n        [onClick, string],\r\n    );\r\n\r\n    return (\r\n        <button\r\n            className={primary ? 'append-primary' : 'append-secondary'}\r\n            onClick={handleClick}\r\n            role-label=\"append-button\"\r\n        >\r\n            <div className=\"append__cross\"></div>\r\n        </button>\r\n    );\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: (arg0: { payload: string[]; type: string }) => void) => ({\r\n    onClick: (data: string[]): void => dispatch(initAppend(data)),\r\n});\r\n\r\nconst AppendItemButton = connect(null, mapDispatchToProps)(React.memo(Button));\r\nexport default AppendItemButton;\r\n\r\nButton.propTypes = {\r\n    onClick: PropTypes.func,\r\n    string: PropTypes.string,\r\n    primary: PropTypes.bool,\r\n};\r\n"],"sourceRoot":""}